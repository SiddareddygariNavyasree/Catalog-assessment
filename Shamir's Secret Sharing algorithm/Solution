import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SecretSharing {

    public static void main(String[] args) {
        // First Sample Test Case
        String jsonString1 = """
        {
            "keys": {
                "n": 4,
                "k": 3
            },
            "1": {
                "base": "10",
                "value": "4"
            },
            "2": {
                "base": "2",
                "value": "111"
            },
            "3": {
                "base": "10",
                "value": "12"
            },
            "6": {
                "base": "4",
                "value": "213"
            }
        }
        """;

        // Second Sample Test Case
        String jsonString2 = """
        {
            "keys": {
                "n": 10,
                "k": 7
            },
            "1": {
                "base": "6",
                "value": "13444211440455345511"
            },
            "2": {
                "base": "15",
                "value": "aed7015a346d63"
            },
            "3": {
                "base": "15",
                "value": "6aeeb69631c227c"
            },
            "4": {
                "base": "16",
                "value": "e1b5e05623d881f"
            },
            "5": {
                "base": "8",
                "value": "316034514573652620673"
            },
            "6": {
                "base": "3",
                "value": "2122212201122002221120200210011020220200"
            },
            "7": {
                "base": "3",
                "value": "20120221122211000100210021102001201112121"
            },
            "8": {
                "base": "6",
                "value": "20220554335330240002224253"
            },
            "9": {
                "base": "12",
                "value": "45153788322a1255483"
            },
            "10": {
                "base": "7",
                "value": "1101613130313526312514143"
            }
        }
        """;

        // Process the first test case
        Map<Integer, BigInteger> points1 = parseJson(jsonString1);
        BigInteger secret1 = findConstantTerm(points1, 3); // k = 3 for the first test case
        System.out.println("Secret (constant term c) for Test Case 1: " + secret1);

        // Process the second test case
        Map<Integer, BigInteger> points2 = parseJson(jsonString2);
        BigInteger secret2 = findConstantTerm(points2, 7); // k = 7 for the second test case
        System.out.println("Secret (constant term c) for Test Case 2: " + secret2);
    }

    // Function to manually parse the JSON string and extract points
    private static Map<Integer, BigInteger> parseJson(String json) {
        Map<Integer, BigInteger> points = new HashMap<>();
        
        // Extract n and k values
        Pattern keysPattern = Pattern.compile("\"keys\":\\s*\\{\\s*\"n\":\\s*(\\d+),\\s*\"k\":\\s*(\\d+)\\s*\\}");
        Matcher keysMatcher = keysPattern.matcher(json);
        if (keysMatcher.find()) {
            // n and k can be stored if needed for additional logic
        }

        // Extract (x, y) pairs
        Pattern pointPattern = Pattern.compile("\"(\\d+)\":\\s*\\{\\s*\"base\":\\s*\"(\\d+)\",\\s*\"value\":\\s*\"(\\S+)\"\\s*\\}");
        Matcher pointMatcher = pointPattern.matcher(json);
        
        while (pointMatcher.find()) {
            int x = Integer.parseInt(pointMatcher.group(1));
            int base = Integer.parseInt(pointMatcher.group(2));
            String valueStr = pointMatcher.group(3);
            BigInteger y = new BigInteger(valueStr, base); // Decode y in the specified base
            points.put(x, y);
        }
        return points;
    }

    // Function to find constant term using Lagrange interpolation
    private static BigInteger findConstantTerm(Map<Integer, BigInteger> points, int k) {
        BigInteger constantTerm = BigInteger.ZERO;

        // Lagrange interpolation formula
        for (Map.Entry<Integer, BigInteger> entry : points.entrySet()) {
            int xi = entry.getKey();
            BigInteger yi = entry.getValue();

            BigInteger term = yi;
            for (Map.Entry<Integer, BigInteger> innerEntry : points.entrySet()) {
                int xj = innerEntry.getKey();
                if (xj != xi) {
                    term = term.multiply(BigInteger.valueOf(-xj))
                               .divide(BigInteger.valueOf(xi - xj));
                }
            }
            constantTerm = constantTerm.add(term);
        }

        return constantTerm;
    }
}



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Output

Secret (constant term c) for Test Case 1: 4
Secret (constant term c) for Test Case 2: 79836264046274

